trigger:
- '*'

schedules:
- cron: '0 3 * * *'
  displayName: 'Deploy every day at 3 A.M.'
  branches:
    include:
      - 'relese'
  always: 'false'

variables:
  buildConfiguration: 'Release'
  releaseBranchName: 'relese'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-20.04'
      demands:
      - npm

    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '6.x'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'

    - task: gulp@1
      displayName: 'Run gulp tasks'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

- stage: 'Dev'
  displayName: 'Deploy the dev environment'
  dependsOn: Build
  condition: |
    and
    ( 
      succeeded(),
      eq(variables['Build.SourceBranchName'], variables ['releaseBranchName'])
    )
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-20.04'
    environment: dev
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'Val-DSS2'
              appType: 'webAppLinux'
              appName: '$(WebAppNameDev)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
              runtimeStack: 'DOTNETCORE|6.0'

- stage: 'Test'
  displayName: 'Deploy to test env'
  dependsOn: 'Dev'
  # condition: (and succeeded(), eq(variables['Build.Reason'], 'Schedule'))
  jobs:
    - deployment: 'deploy'
      pool: 
        vmImage: 'ubuntu-latest'
      variables:
      - group: 'Release'
      environment: test
      strategy:
        runOnce:
          deploy: 
            steps:
            - task: DownloadPipelineArtifact@2
              displayName: 'Download artifact'
              inputs:
                buildType: 'current'
                artifactName: 'drop'
                targetPath: '$(Pipeline.Workspace)'
            - task: AzureWebApp@1
              displayName: 'Deploy to App Env'
              inputs:
                azureSubscription: 'Val-DSS2'
                appType: 'webAppLinux'
                appName: '$(WebAppNameTest)'
                package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
                runtimeStack: 'DOTNETCORE|6.0'

- stage: 'Staging'
  displayName: 'Deploy to Staging Env'
  dependsOn: 'Test'
  jobs:
  - deployment: 'deploy'
    pool:
      vmImage: 'ubuntu-latest'
    variables:
    - group: 'Release'
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'download artifact drop'
            inputs:
              buildType: 'current'
              artifactName: 'drop'
              targetPath: '$(Pipeline.Workspace)'
          
          - task: AzureWebApp@1
            displayName: 'deploy App'
            inputs:
              azureSubscription: 'Val-DSS2'
              appType: 'webAppLinux'
              appName: '$(WebAppNameDev)'
              package: '$(Pipeline.Workspace)/drop/**/*.zip'